/*
 * Provman
 *
 * Copyright (C) 2011 Intel Corporation. All rights reserved.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version
 * 2 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 * 02110-1301, USA.
 *
 *
 * Mark Ryan <mark.d.ryan@intel.com>
 *
 */

/*!
 * @file map_file.h
 *
 * @brief Contains function declarations for managing the map file, that maps
 *        client ids to those automatically generated by the middleware
 *        that is managed by the various plugins.
 *
 * A map file stores the mapping between client assigned identifiers and OS 
 * assigned identifiers for various groups of settings such as email accounts
 * or access points.  For example, let us suppose that a device management
 * client wishes to create a new telephony context.  It would do so by
 * calling the #Set method to provision the follow settings.
 * \code
 * /telephony/contexts/mynewcontext/name = "My New Context"
 * /telephony/contexts/mynewcontext/apn = "apn.operator.com"
 * /telephony/contexts/mynewcontext/username = "me"
 * /telephony/contexts/mynewcontext/name = "secret"
 * \endcode
 *
 * The client has assigned the identifier mynewcontext to this set of 
 * telephony settings.  If he wishes to modify or access the settings in the
 * future he would expect to be able to do so using the same identifier.
 * The problem is that when the context is created, the middleware is likely
 * to assign its own identifier to the context.  Often there is no way for
 * plugins to specify the identifier they would like to use so instead they
 * must maintain a mapping bewteen the client defined identifiers and those
 * defined by the middleware.  This file contains functions that help plugins
 * maintain this mapping.
 * 
 * The mapping is stored in a GKeyFile.  Separate mappings are maintained for
 * each imsi number.  An example mapping file is shown below:
 * \code
 * [246813579]
 * context1=/phonesim/context1
 * test=/phonesim/context3
 * \endcode
 *****************************************************************************/

#ifndef PROVMAN_MAP_FILE_H
#define PROVMAN_MAP_FILE_H

/*! @brief Represents a map file. 
 *
 * The details of this structure are private and are not exposed to the
 * plugins.
 */

typedef struct provman_map_file_t_ provman_map_file_t;

/*! @brief Creates a new provman_map_file_t object.
 *
 * The provman_map_file_t object should be deleted by calling
 * provman_map_file_delete when it is no longer needed.
 *
 * @param fname the path of the mapping file.
 * @param map_file returns a pointer to the new map file on exit.
 */

void provman_map_file_new(const char *fname, provman_map_file_t **map_file);

/*! @brief Reclaims the memory associated with a provman_map_file_t object.
 *
 * This function simply deletes the provman_map_file_t object.  It does not the
 * file that the object represents.  It should be called once the 
 * provman_map_file_t object is no longer used.
 *
 * @param map_file pointer to a provman_map_file_t
 */

void provman_map_file_delete(provman_map_file_t *map_file);

/*! @brief Saves the provman_map_file_t object to disk
 *
 * @param map_file pointer to a map_file
 */

void provman_map_file_save(provman_map_file_t *map_file);

/*! @brief Creates a new mapping between a client identifier and a
 * plugin identifier, a plugin identifier being one that is assigned
 * by the middleware.
 *
 * This function only modifies the in-memory model of the map file.
 * Nothing is committed to the disk until provman_map_file_save is called.
 * 
 * @param map_file pointer to a map_file
 * @param imsi the imsi number of the current session.  If the plugin
 * does not support modem specific settings, it can simply passs a hardcoded
 * string for this parameter.  The string cannot be empty.
 * @param client_id The client identifier as specified by the device management
 *   client.
 * @param plugin_id The middleware identifier.
 */

void provman_map_file_store_map(provman_map_file_t *map_file, const gchar *imsi, 
			const gchar *client_id, const gchar *plugin_id);

/*! @brief Deletes a mapping between a client identifier and a
 * plugin identifier.
 *
 * This function only modifies the in-memory model of the map file.
 * Nothing is committed to the disk until provman_map_file_save is called.
 * 
 * @param map_file pointer to a map_file
 * @param imsi the imsi number of the current session.  If the plugin
 * does not support modem specific settings, it can simply passs a hardcoded
 * string for this parameter.  The string cannot be empty.
 * @param client_id The client identifier as specified by the device management
 *   client.
 * @return PROVMAN_ERR_NONE if the mapping was successfully deleted
 * @return PROVMAN_ERR_NOT_FOUND if the map file did not contain a mapping for
 * the specified client identifier.
 */

int provman_map_file_delete_map(provman_map_file_t *map_file, const gchar *imsi, 
			const gchar *client_id);

/*! @brief Retrieves the client identifier associated with a specified
 *    plugin identifier.
 * 
 * @param map_file pointer to a map_file
 * @param imsi the imsi number of the current session.  If the plugin
 * does not support modem specific settings, it can simply passs a hardcoded
 * string for this parameter.  The string cannot be empty.
 * @param plugin_id The middleware identifier.
 *
 * @return NULL if the plugin identifier does not exist in the map_file.
 * @return a pointer to the client identifier.  The caller owns this string
 *   and it must delete it using g_free once it has finished with it. 
 */

gchar* provman_map_file_find_client_id(provman_map_file_t *map_file,
				       const gchar *imsi,
				       const gchar *plugin_id);

/*! @brief Retrieves the plugin identifier associated with a specified
 *    client identifier.
 * 
 * @param map_file pointer to a map_file
 * @param imsi the imsi number of the current session.  If the plugin
 * does not support modem specific settings, it can simply passs a hardcoded
 * string for this parameter.  The string cannot be empty.
 * @param client_id The client identifier.
 *
 * @return NULL if the plugin identifier does not exist in the map_file.
 * @return a pointer to the client identifier.  The caller owns this string
 *   and it must delete it using g_free once it has finished with it. 
 */

gchar* provman_map_file_find_plugin_id(provman_map_file_t *map_file,
				       const gchar *imsi,
				       const gchar *client_id);

/*! @brief Deletes mappings that are no longer used.
 * 
 * Provman is not the only entity that can modify middleware
 * objects such as email accounts and telephony contexts.  It is possible 
 * that such objects could be manually deleted by the user after they have
 * been provisioned.  If this happens, the map file will be out of date as it
 * will map a client identifier to a non-existant middleware identifier.
 * For this reason, plugins are encouraged to check their mapfiles on
 * at least the first invocation of their #provman_plugin_sync_in_cb
 * function and to delete any stale mappings.  This function is designed to
 * help plugins perform this task.  They simply need to compile a list of
 * all of the extant plugin identifiers and then invoke this function.
 *
 * @param map_file pointer to a map_file
 * @param imsi the imsi number of the current session.  If the plugin
 * does not support modem specific settings, it can simply passs a hardcoded
 * string for this parameter.  The string cannot be empty.
 * @param used_plugin_ids a hashtable containing keys only.  Each key stored
 *   in the hash table should correspond to an existing middleware id.  The
 *   hash table should probably be created as follows,
 *   g_hash_table_new(g_str_hash, g_str_equal)
 *   assuming that the hashtable does not own any of the plugin ids it stores.
 */

void provman_map_file_remove_unused(provman_map_file_t *map_file,
				    const gchar *imsi,
				    GHashTable *used_plugin_ids);

#endif

